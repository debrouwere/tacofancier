// Generated by CoffeeScript 1.8.0
(function() {
  var async, behaved, cheerio, download, extract, extractWords, fs, markdown, meats, protein, read, toHTML, _,
    __slice = [].slice;

  _ = require('underscore');

  _.str = require('underscore.string');

  fs = require('fs');

  fs.path = require('path');

  async = require('async');

  cheerio = require('cheerio');

  markdown = require('markdown').markdown;

  toHTML = _.bind(markdown.toHTML, markdown);

  meats = ['beef', 'chicken', 'turkey', 'fish', 'pork', 'lamb'];

  protein = ['seitan', 'tempeh', 'tofu', 'quorn', 'soyrizo', 'tofurky'];

  behaved = function(fn) {
    return function(first) {
      return fn(first);
    };
  };

  download = function(callback) {
    if (fs.existsSync('tacofancy')) {
      return callback(null);
    } else {
      return exec('make tacofancy', callback);
    }
  };

  read = function() {
    var path, segments, _ref;
    segments = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    segments = segments.filter(_.isString);
    path = (_ref = fs.path).join.apply(_ref, segments);
    return fs.readFileSync(path, {
      encoding: 'utf8'
    });
  };

  extractWords = function(dom) {
    return dom('h1,h2,h3,p').map(function() {
      return dom(this).text();
    }).get().join(' ').replace(/[^\w]/g, ' ').split(' ').map(function(str) {
      return str.toLowerCase();
    });
  };

  extract = function($) {
    var lastLine, metadata, words;
    words = extractWords($);
    lastLine = $('p').last().text();
    return metadata = {
      meats: _.intersection(meats, words),
      protein: _.intersection(protein, words),
      vegetarian: (_.str.contains(lastLine, 'vegetarian')) || protein.length > 0,
      vegan: _.str.contains(lastLine, 'vegan'),
      title: $('h1').text() || null
    };
  };

  async.series([download], function(err) {
    var data, html, metadata, paths, root, serialized, slugs;
    root = 'tacofancy/base_layers';
    paths = fs.readdirSync(root).filter(function(path) {
      return !_.str.contains(path, 'README');
    });
    slugs = paths.map(function(path) {
      return path.slice(0, -3);
    }).map(_.str.dasherize);
    markdown = paths.map(_.partial(read, root));
    html = markdown.map(behaved(toHTML));
    metadata = html.map(behaved(cheerio.load)).map(extract);
    data = _.zip(slugs, markdown, html, metadata).map(function(_arg) {
      var html, markdown, metadata, slug;
      slug = _arg[0], markdown = _arg[1], html = _arg[2], metadata = _arg[3];
      return _.extend(metadata, {
        slug: slug,
        markdown: markdown,
        html: html
      });
    });
    serialized = JSON.stringify(data, void 0, 2);
    fs.writeFileSync('recipes.json', serialized, {
      encoding: 'utf8'
    });
    return console.log('Robot-readable recipes ready!');
  });

  if (process.argv[2] !== 'local') {
    exec('zip, sync ./data to s3');
  }

}).call(this);
